#!/bin/bash

# Pre-commit hook for code quality checks
# Make this file executable: chmod +x .git/hooks/pre-commit

set -e

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get list of staged Java files
STAGED_JAVA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "\.java$" || true)

if [ -z "$STAGED_JAVA_FILES" ]; then
    echo "No Java files staged for commit."
    exit 0
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Store the current stash to restore later
STASH_NAME="pre-commit-$(date +%s)"
git stash save -q --keep-index "$STASH_NAME"

# Function to restore stash
restore_stash() {
    STASHES=$(git stash list)
    if [[ $STASHES == *"$STASH_NAME"* ]]; then
        git stash pop -q
    fi
}

# Ensure we restore the stash on exit
trap restore_stash EXIT

# Check for debugging statements
echo "Checking for debugging statements..."
DEBUG_STATEMENTS=$(grep -n "System\.out\.println\|\.printStackTrace()" $STAGED_JAVA_FILES 2>/dev/null || true)
if [ ! -z "$DEBUG_STATEMENTS" ]; then
    echo -e "${YELLOW}Warning: Found debugging statements:${NC}"
    echo "$DEBUG_STATEMENTS"
    echo -e "${YELLOW}Consider removing these before committing.${NC}"
fi

# Run Checkstyle if available
if command_exists checkstyle && [ -f "checkstyle.xml" ]; then
    echo "Running Checkstyle..."
    for file in $STAGED_JAVA_FILES; do
        if ! checkstyle -c checkstyle.xml "$file" > /dev/null 2>&1; then
            echo -e "${RED}✗ Checkstyle found issues in $file${NC}"
            checkstyle -c checkstyle.xml "$file" 2>&1 | grep -E "^\[ERROR\]" || true
            CHECKSTYLE_FAILED=1
        fi
    done
    
    if [ "$CHECKSTYLE_FAILED" = "1" ]; then
        echo -e "${RED}✗ Checkstyle checks failed${NC}"
        echo "Run 'checkstyle -c checkstyle.xml <file>' to see all issues"
        exit 1
    else
        echo -e "${GREEN}✓ Checkstyle checks passed${NC}"
    fi
fi

# Run SpotBugs if available
if command_exists spotbugs && [ -f "spotbugs-exclude.xml" ]; then
    echo "Running SpotBugs..."
    # Note: SpotBugs typically runs on compiled classes, not source files
    # This is a placeholder for projects that have a spotbugs task configured
    if [ -f "gradlew" ]; then
        ./gradlew spotbugsMain -q || SPOTBUGS_FAILED=1
    elif [ -f "pom.xml" ] && command_exists mvn; then
        mvn spotbugs:check -q || SPOTBUGS_FAILED=1
    fi
    
    if [ "$SPOTBUGS_FAILED" = "1" ]; then
        echo -e "${RED}✗ SpotBugs found issues${NC}"
        exit 1
    else
        echo -e "${GREEN}✓ SpotBugs checks passed${NC}"
    fi
fi

# Run PMD if available
if command_exists pmd && [ -f "pmd-ruleset.xml" ]; then
    echo "Running PMD..."
    PMD_REPORT=$(mktemp)
    pmd check -d . -R pmd-ruleset.xml -f text -r "$PMD_REPORT" --include-java > /dev/null 2>&1 || true
    
    if [ -s "$PMD_REPORT" ]; then
        echo -e "${RED}✗ PMD found issues:${NC}"
        cat "$PMD_REPORT"
        rm -f "$PMD_REPORT"
        exit 1
    else
        echo -e "${GREEN}✓ PMD checks passed${NC}"
        rm -f "$PMD_REPORT"
    fi
fi

# Check for TODO comments
echo "Checking for TODO comments..."
TODO_COMMENTS=$(grep -n "TODO\|FIXME\|XXX\|HACK" $STAGED_JAVA_FILES 2>/dev/null || true)
if [ ! -z "$TODO_COMMENTS" ]; then
    echo -e "${YELLOW}Warning: Found TODO/FIXME comments:${NC}"
    echo "$TODO_COMMENTS"
    echo -e "${YELLOW}Consider creating issues for these items.${NC}"
fi

# Check file size
echo "Checking file sizes..."
for file in $STAGED_JAVA_FILES; do
    FILE_SIZE=$(wc -l < "$file")
    if [ "$FILE_SIZE" -gt 500 ]; then
        echo -e "${YELLOW}Warning: $file has $FILE_SIZE lines (recommended max: 500)${NC}"
    fi
done

# Format check (if google-java-format is available)
if command_exists google-java-format; then
    echo "Checking code formatting..."
    FORMAT_ISSUES=0
    for file in $STAGED_JAVA_FILES; do
        if ! google-java-format --dry-run --set-exit-if-changed "$file" > /dev/null 2>&1; then
            echo -e "${RED}✗ Formatting issues in $file${NC}"
            FORMAT_ISSUES=1
        fi
    done
    
    if [ "$FORMAT_ISSUES" = "1" ]; then
        echo -e "${RED}✗ Code formatting issues found${NC}"
        echo "Run 'google-java-format -i <file>' to fix formatting"
        exit 1
    else
        echo -e "${GREEN}✓ Code formatting checks passed${NC}"
    fi
fi

# Run tests for modified files (if test framework is available)
if [ -f "gradlew" ]; then
    echo "Running related tests..."
    ./gradlew test --parallel || TEST_FAILED=1
elif [ -f "pom.xml" ] && command_exists mvn; then
    echo "Running related tests..."
    mvn test -q || TEST_FAILED=1
fi

if [ "$TEST_FAILED" = "1" ]; then
    echo -e "${RED}✗ Tests failed${NC}"
    exit 1
elif [ ! -z "${TEST_FAILED+x}" ]; then
    echo -e "${GREEN}✓ Tests passed${NC}"
fi

echo -e "${GREEN}✓ All pre-commit checks passed!${NC}"
exit 0