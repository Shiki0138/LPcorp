version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: growth-ai-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-growth_ai}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_DB: ${DB_NAME:-growth_ai_dev}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-growth_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - growth-ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: growth-ai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - growth-ai-network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    container_name: growth-ai-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:4000}
      NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost:4000}
    volumes:
      - ./packages/frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - growth-ai-network
    command: npm run dev

  # Backend API (Node.js/Express)
  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    container_name: growth-ai-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 4000
      DATABASE_URL: postgresql://${DB_USER:-growth_ai}:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/${DB_NAME:-growth_ai_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DALLE_API_KEY: ${DALLE_API_KEY}
    volumes:
      - ./services/backend:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - growth-ai-network
    command: npm run dev

  # AI Service (Python/FastAPI)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: growth-ai-ai-service
    environment:
      PYTHONUNBUFFERED: 1
      PORT: 8000
      DATABASE_URL: postgresql://${DB_USER:-growth_ai}:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/${DB_NAME:-growth_ai_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_CACHE_DIR: /app/models
    volumes:
      - ./services/ai-service:/app
      - ai_models:/app/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - growth-ai-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: growth-ai-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - growth-ai-network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: growth-ai-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - growth-ai-network
    command: server /data --console-address ":9001"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: growth-ai-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - growth-ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: growth-ai-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - growth-ai-network

networks:
  growth-ai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  ai_models:
  prometheus_data:
  grafana_data: