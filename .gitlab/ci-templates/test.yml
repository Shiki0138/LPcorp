# Test Pipeline Template
# Reusable test configurations for different test types

# Unit test template
.unit-test:
  variables:
    TEST_TYPE: "unit"
  script:
    - echo "Running ${TEST_TYPE} tests for ${SERVICE_NAME}"
  artifacts:
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"
        - "**/build/test-results/test/TEST-*.xml"
      coverage:
        path: "coverage.xml"
        coverage_format: cobertura
    paths:
      - "**/target/site/jacoco/"
      - "**/build/reports/jacoco/"
      - coverage/
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'

# Maven unit test
.maven-unit-test:
  extends: .unit-test
  image: maven:3.8.6-openjdk-11
  script:
    - mvn test jacoco:report
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/coverage-report.sh maven
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/site/jacoco/

# Gradle unit test
.gradle-unit-test:
  extends: .unit-test
  image: gradle:7.5.1-jdk11
  script:
    - gradle test jacocoTestReport
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/coverage-report.sh gradle
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/jacoco/

# Node.js unit test
.node-unit-test:
  extends: .unit-test
  image: node:16-alpine
  before_script:
    - npm ci
  script:
    - npm run test:unit -- --coverage --ci --reporters=default --reporters=jest-junit
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/coverage-report.sh node
  artifacts:
    reports:
      junit: junit.xml
      coverage:
        path: coverage/cobertura-coverage.xml
        coverage_format: cobertura
    paths:
      - coverage/

# Python unit test
.python-unit-test:
  extends: .unit-test
  image: python:3.9-slim
  before_script:
    - pip install pytest pytest-cov pytest-junit
  script:
    - pytest --cov=${SERVICE_NAME} --cov-report=xml --cov-report=html --junitxml=junit.xml
  artifacts:
    reports:
      junit: junit.xml
      coverage:
        path: coverage.xml
        coverage_format: cobertura
    paths:
      - htmlcov/

# Integration test template
.integration-test:
  variables:
    TEST_TYPE: "integration"
  services:
    - postgres:13
    - redis:6
    - docker:dind
  variables:
    POSTGRES_DB: "testdb"
    POSTGRES_USER: "testuser"
    POSTGRES_PASSWORD: "testpass"
    REDIS_HOST: "redis"
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/testdb"
  script:
    - echo "Running ${TEST_TYPE} tests"
  artifacts:
    reports:
      junit: "**/test-results/integration/*.xml"
    paths:
      - test-results/
    expire_in: 1 week

# Maven integration test
.maven-integration-test:
  extends: .integration-test
  image: maven:3.8.6-openjdk-11
  script:
    - mvn verify -Pintegration-test
  artifacts:
    reports:
      junit: target/failsafe-reports/TEST-*.xml

# API test template
.api-test:
  image: postman/newman:latest
  variables:
    TEST_TYPE: "api"
  script:
    - newman run ${COLLECTION_FILE}
      --environment ${ENVIRONMENT_FILE}
      --reporters cli,junit
      --reporter-junit-export results/newman-results.xml
  artifacts:
    reports:
      junit: results/newman-results.xml
    paths:
      - results/
    expire_in: 1 week

# End-to-end test template
.e2e-test:
  image: cypress/browsers:latest
  variables:
    TEST_TYPE: "e2e"
    CYPRESS_baseUrl: "${APPLICATION_URL}"
  script:
    - npm ci
    - npm run cypress:run -- --record --key ${CYPRESS_RECORD_KEY}
  artifacts:
    when: always
    paths:
      - cypress/videos/
      - cypress/screenshots/
      - cypress/results/
    reports:
      junit: cypress/results/*.xml
    expire_in: 1 week

# Performance test template
.performance-test:
  image: grafana/k6:latest
  variables:
    TEST_TYPE: "performance"
    K6_CLOUD_TOKEN: "${K6_CLOUD_TOKEN}"
  script:
    - k6 run
      --out cloud
      --vus ${VUS:-10}
      --duration ${DURATION:-30s}
      tests/performance/${TEST_SCRIPT:-load.js}
  artifacts:
    reports:
      performance: performance-report.json
    paths:
      - performance-results/
    expire_in: 1 week

# Security test template
.security-test:
  image: owasp/zap2docker-stable:latest
  variables:
    TEST_TYPE: "security"
  script:
    - zap-baseline.py -t ${TARGET_URL} -r security-report.html -J security-report.json
  artifacts:
    paths:
      - security-report.*
    expire_in: 1 month
  allow_failure: true

# Contract test template
.contract-test:
  image: pactfoundation/pact-cli:latest
  variables:
    TEST_TYPE: "contract"
    PACT_BROKER_URL: "${PACT_BROKER_URL}"
  script:
    - pact verify
      --provider-base-url ${PROVIDER_URL}
      --pact-broker-url ${PACT_BROKER_URL}
      --provider ${PROVIDER_NAME}
      --provider-version ${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - pact/
    expire_in: 1 week

# Mutation test template
.mutation-test:
  image: pitest/pitest:latest
  variables:
    TEST_TYPE: "mutation"
  script:
    - mvn org.pitest:pitest-maven:mutationCoverage
  artifacts:
    paths:
      - target/pit-reports/
    expire_in: 1 week
  allow_failure: true

# Test matrix template
.test-matrix:
  parallel:
    matrix:
      - TEST_SUITE: ["unit", "integration", "api"]
        ENVIRONMENT: ["dev", "staging"]
  script:
    - echo "Running ${TEST_SUITE} tests in ${ENVIRONMENT}"
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/run-tests.sh ${TEST_SUITE} ${ENVIRONMENT}

# Test report aggregation
.test-report-aggregate:
  image: alpine:latest
  before_script:
    - apk add --no-cache bash jq
  script:
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/aggregate-test-reports.sh
  artifacts:
    reports:
      junit: aggregated-test-results.xml
    paths:
      - test-summary/
    expire_in: 1 month