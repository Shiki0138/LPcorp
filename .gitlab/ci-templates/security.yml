# Security Pipeline Template
# Comprehensive security scanning configurations

# SAST (Static Application Security Testing) template
.sast-scan:
  stage: security-scan
  variables:
    SAST_CONFIDENCE_LEVEL: 3
    SECURE_LOG_LEVEL: "debug"
  script:
    - echo "Running SAST scan"
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
      - sast-results/
    expire_in: 1 month
  allow_failure: true

# GitLab SAST
.gitlab-sast:
  extends: .sast-scan
  include:
    - template: Security/SAST.gitlab-ci.yml
  variables:
    SAST_EXCLUDED_PATHS: "spec,test,tests,tmp,node_modules,vendor"
    SAST_BANDIT_EXCLUDED_PATHS: "*/test/**,*/tests/**"

# SonarQube security scan
.sonarqube-security:
  extends: .sast-scan
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  script:
    - sonar-scanner
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.projectKey=${CI_PROJECT_NAME}
      -Dsonar.security.hotspots.maxIssues=0
      -Dsonar.qualitygate.wait=true

# Dependency scanning template
.dependency-scan:
  stage: security-scan
  variables:
    DS_JAVA_VERSION: 11
  script:
    - echo "Running dependency scan"
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json
      - dependency-results/
    expire_in: 1 month
  allow_failure: true

# GitLab dependency scanning
.gitlab-dependency-scan:
  extends: .dependency-scan
  include:
    - template: Security/Dependency-Scanning.gitlab-ci.yml

# OWASP dependency check
.owasp-dependency-check:
  extends: .dependency-scan
  image: owasp/dependency-check:latest
  script:
    - dependency-check.sh
      --project "${CI_PROJECT_NAME}"
      --scan .
      --format "ALL"
      --out dependency-check-report
      --suppression dependency-check-suppression.xml
      --enableExperimental
  artifacts:
    paths:
      - dependency-check-report/

# Container scanning template
.container-scan:
  stage: security-scan
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    CS_MAJOR_VERSION: 4
  script:
    - echo "Running container scan"
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
    paths:
      - gl-container-scanning-report.json
      - container-results/
    expire_in: 1 month
  allow_failure: true

# GitLab container scanning
.gitlab-container-scan:
  extends: .container-scan
  include:
    - template: Security/Container-Scanning.gitlab-ci.yml
  variables:
    CS_IMAGE: "${CI_REGISTRY_IMAGE}/${SERVICE_NAME}:${CI_COMMIT_SHORT_SHA}"

# Trivy container scan
.trivy-container-scan:
  extends: .container-scan
  image: aquasec/trivy:latest
  script:
    - trivy image
      --severity HIGH,CRITICAL
      --no-progress
      --format json
      --output trivy-report.json
      ${CI_REGISTRY_IMAGE}/${SERVICE_NAME}:${CI_COMMIT_SHORT_SHA}
    - trivy image
      --severity HIGH,CRITICAL
      --no-progress
      --format table
      ${CI_REGISTRY_IMAGE}/${SERVICE_NAME}:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - trivy-report.json

# License scanning template
.license-scan:
  stage: security-scan
  image: licensefinder/license_finder:latest
  script:
    - license_finder report --format json > license-report.json
    - license_finder report --format html > license-report.html
  artifacts:
    paths:
      - license-report.*
    expire_in: 1 month
  allow_failure: true

# Secret scanning template
.secret-scan:
  stage: security-scan
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog filesystem .
      --json
      --no-verification
      --exclude-paths .trufflehog-exclude.txt
      > secret-scan-report.json
  artifacts:
    paths:
      - secret-scan-report.json
    expire_in: 1 month
  allow_failure: false

# Infrastructure as Code scanning
.iac-scan:
  stage: security-scan
  image: bridgecrew/checkov:latest
  script:
    - checkov -d .
      --framework all
      --output json
      --output-file-path checkov-report.json
    - checkov -d .
      --framework all
      --output cli
  artifacts:
    paths:
      - checkov-report.json
    expire_in: 1 month
  allow_failure: true

# DAST (Dynamic Application Security Testing) template
.dast-scan:
  stage: security-scan
  image: owasp/zap2docker-stable:latest
  variables:
    DAST_WEBSITE: "${APPLICATION_URL}"
  script:
    - mkdir -p /zap/wrk
    - zap-full-scan.py
      -t ${DAST_WEBSITE}
      -r dast-report.html
      -J dast-report.json
      -w dast-report.md
      -x dast-report.xml
      --hook=/zap/auth_hook.py
  artifacts:
    reports:
      dast: dast-report.json
    paths:
      - dast-report.*
    expire_in: 1 month
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG'

# Security policy compliance
.security-compliance:
  stage: security-scan
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq
  script:
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/security-compliance-check.sh
  artifacts:
    paths:
      - compliance-report/
    expire_in: 1 month

# Vulnerability management
.vulnerability-management:
  stage: security-scan
  image: alpine:latest
  before_script:
    - apk add --no-cache bash curl jq
  script:
    - bash ${CI_PROJECT_DIR}/infrastructure/scripts/ci/vulnerability-report.sh
  artifacts:
    paths:
      - vulnerability-summary/
    expire_in: 1 month

# Security benchmarking
.security-benchmark:
  stage: security-scan
  image: docker/docker-bench-security:latest
  script:
    - docker run --rm --net host --pid host --userns host --cap-add audit_control
      -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST
      -v /etc:/etc:ro
      -v /usr/bin/docker-containerd:/usr/bin/docker-containerd:ro
      -v /usr/bin/docker-runc:/usr/bin/docker-runc:ro
      -v /usr/lib/systemd:/usr/lib/systemd:ro
      -v /var/lib:/var/lib:ro
      -v /var/run/docker.sock:/var/run/docker.sock:ro
      --label docker_bench_security
      docker/docker-bench-security
  artifacts:
    paths:
      - docker-bench-results/
    expire_in: 1 month
  allow_failure: true

# Combined security scan
.full-security-scan:
  stage: security-scan
  trigger:
    include: security-scan-pipeline.yml
    strategy: depend
  variables:
    SCAN_TYPE: "full"
    SCAN_BRANCHES: "main,develop"