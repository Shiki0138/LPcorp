# Root GitLab CI/CD Pipeline Configuration
# Multi-stage pipeline with parallel execution and artifact management

stages:
  - compile
  - test
  - build
  - security-scan
  - deploy-dev
  - integration-test
  - deploy-staging
  - smoke-test
  - deploy-prod

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository"
  SPRING_PROFILES_ACTIVE: "ci"
  KUBERNETES_NAMESPACE_DEV: "lp-dev"
  KUBERNETES_NAMESPACE_STAGING: "lp-staging"
  KUBERNETES_NAMESPACE_PROD: "lp-prod"
  HELM_CHART_VERSION: "${CI_COMMIT_SHORT_SHA}"
  REGISTRY_URL: "${CI_REGISTRY}"
  SONAR_HOST_URL: "${SONAR_HOST}"
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"

# Cache configuration for faster builds
.cache-config:
  cache:
    key: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .m2/repository/
      - .gradle/
      - node_modules/
      - .npm/
      - target/
      - build/
    policy: pull-push

# Docker-in-Docker service configuration
.docker-config:
  services:
    - docker:dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

# Kubernetes deployment configuration
.k8s-config:
  image: bitnami/kubectl:latest
  before_script:
    - kubectl config set-cluster k8s --server="${KUBE_URL}"
    - kubectl config set-credentials gitlab --token="${KUBE_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=gitlab
    - kubectl config use-context default

# Include service-specific pipelines
include:
  - local: '/.gitlab/ci-templates/build.yml'
  - local: '/.gitlab/ci-templates/test.yml'
  - local: '/.gitlab/ci-templates/security.yml'
  - local: '/.gitlab/ci-templates/deploy.yml'
  - local: '/.gitlab/ci-templates/quality.yml'
  - local: '/services/user-service/.gitlab-ci.yml'
  - local: '/services/content-service/.gitlab-ci.yml'
  - local: '/services/analytics-service/.gitlab-ci.yml'
  - local: '/services/payment-service/.gitlab-ci.yml'
  - local: '/services/search-service/.gitlab-ci.yml'
  - local: '/services/recommendation-service/.gitlab-ci.yml'
  - local: '/services/media-service/.gitlab-ci.yml'
  - local: '/services/notification-service/.gitlab-ci.yml'
  - local: '/services/gateway/.gitlab-ci.yml'

# Global compile stage
compile:all:
  stage: compile
  image: maven:3.8.6-openjdk-11
  extends: .cache-config
  script:
    - mvn clean compile -DskipTests
  artifacts:
    paths:
      - "*/target/"
    expire_in: 1 hour
  only:
    - branches
    - merge_requests
    - tags

# Global test stage with parallel execution
test:unit:
  stage: test
  image: maven:3.8.6-openjdk-11
  extends: .cache-config
  needs: ["compile:all"]
  parallel:
    matrix:
      - SERVICE: [user-service, content-service, analytics-service, payment-service]
      - SERVICE: [search-service, recommendation-service, media-service, notification-service]
  script:
    - cd services/${SERVICE}
    - mvn test
    - bash ../../infrastructure/scripts/ci/generate-test-report.sh
  artifacts:
    reports:
      junit:
        - services/*/target/surefire-reports/TEST-*.xml
    paths:
      - services/*/target/site/jacoco/
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'

# Build Docker images
build:docker:
  stage: build
  image: docker:latest
  extends: .docker-config
  needs: ["test:unit"]
  parallel:
    matrix:
      - SERVICE: [user-service, content-service, analytics-service, payment-service]
      - SERVICE: [search-service, recommendation-service, media-service, notification-service]
      - SERVICE: [gateway]
  script:
    - cd services/${SERVICE}
    - docker build -t ${REGISTRY_URL}/${SERVICE}:${CI_COMMIT_SHORT_SHA} .
    - docker push ${REGISTRY_URL}/${SERVICE}:${CI_COMMIT_SHORT_SHA}
    - docker tag ${REGISTRY_URL}/${SERVICE}:${CI_COMMIT_SHORT_SHA} ${REGISTRY_URL}/${SERVICE}:latest
    - docker push ${REGISTRY_URL}/${SERVICE}:latest
  only:
    - main
    - develop
    - tags

# Security scanning
security:sast:
  stage: security-scan
  extends: .cache-config
  needs: ["build:docker"]
  script:
    - bash infrastructure/scripts/ci/security-scan.sh sast
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: true

security:dependency:
  stage: security-scan
  extends: .cache-config
  needs: ["build:docker"]
  script:
    - bash infrastructure/scripts/ci/security-scan.sh dependency
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  allow_failure: true

security:container:
  stage: security-scan
  image: docker:latest
  extends: .docker-config
  needs: ["build:docker"]
  script:
    - bash infrastructure/scripts/ci/security-scan.sh container
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  allow_failure: true

# Deploy to development
deploy:dev:
  stage: deploy-dev
  extends: .k8s-config
  needs: ["security:sast", "security:dependency", "security:container"]
  environment:
    name: development
    url: https://dev.lp-platform.com
  script:
    - bash infrastructure/scripts/ci/deploy-to-k8s.sh dev ${CI_COMMIT_SHORT_SHA}
  only:
    - develop
  when: on_success

# Integration tests
test:integration:
  stage: integration-test
  image: node:16-alpine
  needs: ["deploy:dev"]
  script:
    - cd tests/integration
    - npm ci
    - npm run test:integration
  artifacts:
    reports:
      junit: tests/integration/reports/*.xml
  only:
    - develop

# Deploy to staging
deploy:staging:
  stage: deploy-staging
  extends: .k8s-config
  needs: ["test:integration"]
  environment:
    name: staging
    url: https://staging.lp-platform.com
  script:
    - bash infrastructure/scripts/ci/deploy-to-k8s.sh staging ${CI_COMMIT_SHORT_SHA}
  only:
    - main
  when: manual

# Smoke tests
test:smoke:
  stage: smoke-test
  image: node:16-alpine
  needs: ["deploy:staging"]
  script:
    - cd tests/smoke
    - npm ci
    - npm run test:smoke
  artifacts:
    reports:
      junit: tests/smoke/reports/*.xml
  only:
    - main

# Deploy to production
deploy:prod:
  stage: deploy-prod
  extends: .k8s-config
  needs: ["test:smoke"]
  environment:
    name: production
    url: https://lp-platform.com
  script:
    - bash infrastructure/scripts/ci/deploy-to-k8s.sh prod ${CI_COMMIT_SHORT_SHA}
  only:
    - tags
  when: manual

# Rollback job
rollback:prod:
  stage: deploy-prod
  extends: .k8s-config
  environment:
    name: production
    url: https://lp-platform.com
  script:
    - bash infrastructure/scripts/ci/rollback.sh prod
  only:
    - tags
  when: manual

# Quality gate
quality:sonarqube:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs: ["compile:all"]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.projectKey=${CI_PROJECT_NAME}
      -Dsonar.projectVersion=${CI_COMMIT_SHORT_SHA}
      -Dsonar.sources=services
      -Dsonar.java.binaries=services/*/target/classes
      -Dsonar.coverage.jacoco.xmlReportPaths=services/*/target/site/jacoco/jacoco.xml
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop