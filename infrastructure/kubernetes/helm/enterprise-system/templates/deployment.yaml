{{- range $name, $service := .Values.services }}
{{- if $service.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name | kebabcase }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "enterprise-system.labels" $ | nindent 4 }}
    app: {{ $name | kebabcase }}
    component: backend
spec:
  replicas: {{ $service.replicaCount }}
  selector:
    matchLabels:
      app: {{ $name | kebabcase }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: {{ $name | kebabcase }}
        release: {{ $.Release.Name }}
        version: {{ $service.image.tag | default $.Chart.AppVersion }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      {{- with $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ $name | kebabcase }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: {{ $name | kebabcase }}
        image: "{{ $.Values.global.imageRegistry }}/{{ $service.image.repository }}:{{ $service.image.tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ $service.image.pullPolicy | default "IfNotPresent" }}
        ports:
        - name: http
          containerPort: {{ $service.service.port }}
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: {{ $name | kebabcase }}
        - name: ENVIRONMENT
          value: {{ $.Values.global.environment }}
        - name: LOG_LEVEL
          value: {{ $service.logLevel | default "info" }}
        {{- if $service.env }}
        {{- toYaml $service.env | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml $service.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        {{- if eq $name "paymentService" }}
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: {{ $name | kebabcase }}-config
      {{- if eq $name "paymentService" }}
      - name: tls-certs
        secret:
          secretName: {{ $name | kebabcase }}-tls
      {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}